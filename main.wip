// rule 110 implementation on wip-lang
// https://en.wikipedia.org/wiki/Rule_110

const size = 64;

var arr1: *int = allocate(size * 8);
var arr2: *int = allocate(size * 8);

var i = 0;

while i < size {
  *(arr1 + i) = 0;
  ++i;
}
*(arr1 + size - 1) = 1;

const calcCell = (left: int, middle: int, right: int): int => {
  if left {
    if middle {
      return !right;
    }
    return !!right;
  }
  return middle || right;
};

const processLine = (arr1: *int, arr2: *int, size: int) => {
  var i = 0;
  while i < size {
    const left = (i != 0) && *(arr1 + i - 1);
    const middle = *(arr1 + i);
    const right = (i != size - 1) && *(arr1 + i + 1);

    +

    *(arr2 + i) = calcCell(left, middle, right);
    ++i;
  }
};

const drawLine = (arr: *int, size: int) => {
  var i = 0;
  while i - size {
    const cell = *(arr + i);

    if cell {
      print("#");
    } else {
      print(" ");
    }

    ++i;
  }
  print("\n");
};

print("\nRule 110:\n");

var j = size;
while j-- {
  drawLine(arr1, size);
  processLine(arr1, arr2, size);

  const tmpArr = arr1;
  arr1 = arr2;
  arr2 = tmpArr;
}
